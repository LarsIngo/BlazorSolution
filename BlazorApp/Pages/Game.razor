@page "/game"
@using System.Diagnostics
@using BlazorApp.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Game</PageTitle>

<h1>Game</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="form-group">
	<label>
		User:
		<input @bind="userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Message:
		<input @bind="messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private HubConnection? hubConnection;
	private List<string> messages = new List<string>();
	private string? userInput;
	private string? messageInput;

	private int currentCount = 0;

	private void IncrementCount()
	{
		currentCount++;
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri($"/{nameof(NotificationHub)}"))
			.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			Debug.Print("Hej");
			var encodedMsg = $"{user}: {message}";
			messages.Add(encodedMsg);
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<string, string>("OnStart", (user, color) =>
		{
			//var encodedMsg = $"{user}: {message}";
			Debug.Print(color);
			//messages.Add(encodedMsg);
			//InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();

		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("OnStart", userInput, messageInput);
		}
	}

	private async Task Send()
	{
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", userInput, messageInput);
		}
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
